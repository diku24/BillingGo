// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/Dinesh/go/src/BillingGo/services/service.go
//
// Generated by this command:
//
//	mockgen -source=C:/Users/Dinesh/go/src/BillingGo/services/service.go -destination=C:/Users/Dinesh/go/src/BillingGo/mocks/serviceMocks.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	models "BillingGo/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBillService is a mock of BillService interface.
type MockBillService struct {
	ctrl     *gomock.Controller
	recorder *MockBillServiceMockRecorder
}

// MockBillServiceMockRecorder is the mock recorder for MockBillService.
type MockBillServiceMockRecorder struct {
	mock *MockBillService
}

// NewMockBillService creates a new mock instance.
func NewMockBillService(ctrl *gomock.Controller) *MockBillService {
	mock := &MockBillService{ctrl: ctrl}
	mock.recorder = &MockBillServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillService) EXPECT() *MockBillServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillService) Create(model *models.Customer) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillServiceMockRecorder) Create(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillService)(nil).Create), model)
}

// Delete mocks base method.
func (m *MockBillService) Delete(id string) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBillServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBillService)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockBillService) GetAll() ([]*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBillServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBillService)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockBillService) GetById(id string) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBillServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBillService)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockBillService) Update(model *models.Customer) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBillServiceMockRecorder) Update(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBillService)(nil).Update), model)
}
