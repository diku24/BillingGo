// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/Dinesh/go/src/BillingGo/api/router.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:/Users/Dinesh/go/src/BillingGo/api/router.go -destination=C:/Users/Dinesh/go/src/BillingGo/mocks/apiMocks.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockRouter) DELETE(uri string, funcojb func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DELETE", uri, funcojb)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterMockRecorder) DELETE(uri, funcojb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouter)(nil).DELETE), uri, funcojb)
}

// GET mocks base method.
func (m *MockRouter) GET(uri string, funcojb func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GET", uri, funcojb)
}

// GET indicates an expected call of GET.
func (mr *MockRouterMockRecorder) GET(uri, funcojb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouter)(nil).GET), uri, funcojb)
}

// GraceFulShutDown mocks base method.
func (m *MockRouter) GraceFulShutDown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraceFulShutDown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GraceFulShutDown indicates an expected call of GraceFulShutDown.
func (mr *MockRouterMockRecorder) GraceFulShutDown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraceFulShutDown", reflect.TypeOf((*MockRouter)(nil).GraceFulShutDown), ctx)
}

// POST mocks base method.
func (m *MockRouter) POST(uri string, funcojb func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "POST", uri, funcojb)
}

// POST indicates an expected call of POST.
func (mr *MockRouterMockRecorder) POST(uri, funcojb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouter)(nil).POST), uri, funcojb)
}

// SERVE mocks base method.
func (m *MockRouter) SERVE(port string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SERVE", port)
}

// SERVE indicates an expected call of SERVE.
func (mr *MockRouterMockRecorder) SERVE(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SERVE", reflect.TypeOf((*MockRouter)(nil).SERVE), port)
}

// UPDATE mocks base method.
func (m *MockRouter) UPDATE(uri string, funcojb func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UPDATE", uri, funcojb)
}

// UPDATE indicates an expected call of UPDATE.
func (mr *MockRouterMockRecorder) UPDATE(uri, funcojb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UPDATE", reflect.TypeOf((*MockRouter)(nil).UPDATE), uri, funcojb)
}
